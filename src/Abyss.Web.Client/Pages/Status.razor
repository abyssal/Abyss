@page "/status"
@inject HttpClient Http

<h1>Bot status</h1>

@if (notfound)
{
    <p>Not connected.</p>
}
else if (info == null)
{
    <p>Loading...</p>
}
else
{
    <p>@info.ServiceName instance running on @info.OperatingSystem (runtime version @info.RuntimeVersion), powering @info.Guilds guilds (@info.Channels channels, and @info.Users users)</p>
    <p>
        <b>Content root path:</b> @info.ContentRootPath</p>
}

@if (notfoundSupportServer)
{
    <p>Not connected.</p>
}
else if (info != null && ssinfo == null)
{
    <p>No support server is configured in the configuration.</p>
}
else if (ssinfo == null)
{
    <p>Loading support server info...</p>
}
else
{
    <h1>Support Server @ssinfo.Name</h1>
    <p>Owned by @ssinfo.Owner</p>
    <p>Member count: @ssinfo.MemberCount</p>
    <img src="@ssinfo.GuildIconUrl"/>
}

@code {
ServiceInfo info;
BotSupportServerInfo ssinfo;
bool notfound = false;
bool notfoundSupportServer = false;

protected override async Task OnInitializedAsync()
{
try
{
info = await Http.GetJsonAsync
<ServiceInfo>("api/status");
}
catch
{
notfound = true;
}
try
{
ssinfo = await Http.GetJsonAsync
<BotSupportServerInfo>("api/status/support");
}
catch
{
notfoundSupportServer = true;
}
}

}