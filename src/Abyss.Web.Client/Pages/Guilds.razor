@page "/guilds"
@using Abyss.Shared
@inject HttpClient Http

<h1>Guilds</h1>

<p>View the status of all guilds here.</p>

@if (guilds == null)
{
    <p><em>Loading guilds... (depending on the size of your bot, this may take some time)</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Owner</th>
                <th>Member count</th>
                <th>Bot's highest role name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var guild in guilds)
            {
                <tr>
                    <td>@guild.Id</td>
                    <td>@guild.Name</td>
                    <td>@guild.Owner</td>
                    <td>@guild.MemberCount</td>
                    <td>@(guild.HighestRoleName ?? "None")</td>
                    <td>
                        <button class="btn btn-info" @onclick="@(async () => await DisplayMoreInfoDialog(guild))">More info</button>
                        <button class="btn btn-danger" @onclick="@(async () => await LeaveGuildAsync(guild.Id))">Leave</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (detailed != null)
    {
        <h3>@baseinfo.Name</h3>
        @if (detailed.AbyssJoinDate != null)
        {
            <p>Abyss join date: @(detailed.AbyssJoinDate.Value.ToString("F"))</p>
        }
        @if (detailed.AfkChannel != null)
        {
            <p>AFK channel: @detailed.AfkChannel</p>
        }
        <p>Created: @(detailed.CreationDate.ToString("F"))</p>
        <p>Roles: @(detailed.Roles)</p>
        <p>Voice channels: @(detailed.VoiceChannels)</p>
        <p>Text channels: @(detailed.TextChannels)</p>
    }
}

@code {
List<GuildInfo> guilds;
GuildInfoDetailed detailed;
GuildInfo baseinfo;

protected override async Task OnInitializedAsync()
{
    guilds = await Http.GetJsonAsync<List<GuildInfo>>("api/guilds");
}

public async Task DisplayMoreInfoDialog(GuildInfo guildInfo)
{
    if (baseinfo != null && baseinfo.Id == guildInfo.Id) return;
    baseinfo = guildInfo;
    detailed = await Http.GetJsonAsync<GuildInfoDetailed>("api/guilds/" + guildInfo.Id);
}

public async Task LeaveGuildAsync(string id)
{
    var resp = await Http.DeleteAsync("api/guilds/" + id);
    if (resp.StatusCode == System.Net.HttpStatusCode.OK)
    {
        guilds.Remove(guilds.FirstOrDefault(a => a.Id == id));
    }
}
}
